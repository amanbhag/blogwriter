// Generated by CoffeeScript 1.10.0
var cheerio, extend, truncate;

cheerio = require('cheerio');

extend = function(obj, dft) {
  var k, v;
  if (obj == null) {
    obj = {};
  }
  for (k in dft) {
    v = dft[k];
    if (obj[k] != null) {
      continue;
    }
    obj[k] = v;
  }
  return obj;
};


/**
 * truncate html
 * truncate(html, [length], [options])
 * @param  {String}        html    html string to truncate
 * @param  {Object|number} length
 * @param  {Object|null}   options
 * @return {String}
 * @example
 * truncate('<p>wweeweewewwe</p>', 10)
 * truncate('<p>wweeweewewwe</p>', 10, {stripTags: true})
 * truncate('<p>wweeweewewwe</p>', {stripTags: true, length: 10})
 */

truncate = function(html, length, options) {
  var $, $html, len, text, travelChildren;
  switch (typeof length) {
    case 'object':
      options = length;
      break;
    case 'number':
      if (typeof options === 'object') {
        options.length = length;
      } else {
        options = {
          length: length
        };
      }
  }
  options = extend(options, truncate.defaultOptions);
  if (typeof options.length !== 'number' || options.length <= 0) {
    return html;
  }
  if (typeof html === 'object') {
    html = $(html).html();
  }
  $ = cheerio.load("<div>" + html + "</div>");
  $html = $('div').first();
  if (options.excludes) {
    if (!Array.isArray(options.excludes)) {
      options.excludes = [options.excludes];
    }
    $html.find(options.excludes.join(',')).remove();
  }
  if (options.stripTags) {
    text = $html.text().replace(/\s+/, ' ');
    if (text.length <= options.length) {
      return text;
    } else {
      return text.substr(0, options.length) + options.ellipsis;
    }
  }
  len = options.length;
  travelChildren = function($ele, length) {
    return $ele.contents().each(function() {
      switch (this.type) {
        case 'text':
          if (len <= 0) {
            $(this).remove();
            return;
          }
          text = $(this).text().replace(/\s+/g, ' ');
          if (text.length <= len) {
            this.data = text;
            return len -= text.length;
          } else {
            this.data = text.substr(0, len) + options.ellipsis;
            return len = 0;
          }
          break;
        case 'tag':
          if (len <= 0) {
            return $(this).remove();
          } else {
            return travelChildren($(this), len);
          }
          break;
        default:
          return $(this).remove();
      }
    });
  };
  travelChildren($html, len);
  return $html.html();
};

truncate.defaultOptions = {
  stripTags: false,
  ellipsis: '...'
};

module.exports = truncate;
